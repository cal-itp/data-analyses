metadata:
  version: 1
sources:  
    stanford_shorelines:
        driver: shapefile
        description: Stanford shoreline data
        url: https://earthworks.stanford.edu/catalog/stanford-vt021tk4894
        args:
          urlpath: gs://calitp-analytics-data/data-analyses/msd_dashboard_metric/stanford_shorelines.zip
          use_fsspec: true
    ca_boundary:
        driver: geoparquet
        description: CA boundary
        args:
          urlpath: gs://calitp-analytics-data/data-analyses/high_quality_transit_areas/ca_boundary.parquet
    ## INTERMEDIATE DATA
    # Source: rail_ferry_brt_stops.py
    stops_info_crosswalk:
        driver: geoparquet
        description: Assembled stop gdf with route info from trips table.
        args:
          urlpath: gs://calitp-analytics-data/data-analyses/high_quality_transit_areas/stops_to_route.parquet
    # Source: rail_ferry_brt_stops.py
    rail_brt_ferry_stops:
        driver: geoparquet
        description: All the major transit stops (Rail / BRT / Ferry).
        args:
          urlpath: gs://calitp-analytics-data/data-analyses/high_quality_transit_areas/rail_brt_ferry.parquet
    # Source: create_hqta_segments.py
    hqta_segments:
        driver: geoparquet
        description: Cut HQTA segments across all operators. 
        args:
          urlpath: gs://calitp-analytics-data/data-analyses/high_quality_transit_areas/hqta_segments.parquet   
    # Source: sjoin_stops_to_segments.py
    all_bus:
        driver: geoparquet
        description: Combined hqta corridors across all operators. 
        args:
          urlpath: gs://calitp-analytics-data/data-analyses/high_quality_transit_areas/all_bus.parquet  
    # Source: prep_pairwise_intersections.py
    pairwise_intersections:
        driver: parquet
        description: Use spatial join to find which hqta segments do intersect at some point.
        args:
          urlpath: gs://calitp-analytics-data/data-analyses/high_quality_transit_areas/pairwise.parquet   
    # Source: prep_pairwise_intersections.py
    subset_corridors:
        driver: geoparquet
        description: Narrow down `all_bus` to hqta segments that are found in `pairwise_intersections`.
        args:
          urlpath: gs://calitp-analytics-data/data-analyses/high_quality_transit_areas/subset_corridors.parquet 
    # Source: get_intersections.py
    all_intersections:
        driver: geoparquet
        description: Find where 2 bus corridors intersect by doing an intersection between the hqta segments.
        args:
          urlpath: gs://calitp-analytics-data/data-analyses/high_quality_transit_areas/all_intersections.parquet
    # Source: create_bus_hqta_types.py
    major_stop_bus:
        driver: geoparquet
        description: Bus stops that are within the bus intersections. 
        args:
          urlpath: gs://calitp-analytics-data/data-analyses/high_quality_transit_areas/major_stop_bus.parquet
    stops_in_hq_corr:
        driver: geoparquet
        description: Bus stops that are within the HQ corridors, even if they stops themselves do not have a lot of trips pass through. 
        args:
          urlpath: gs://calitp-analytics-data/data-analyses/high_quality_transit_areas/stops_in_hq_corr.parquet
    ## FINAL DATA
    # Source: assemble_hqta_points
    hqta_points:
        driver: geoparquet
        description: Combined point data for all HQTA types.
        args:
          urlpath: gs://calitp-analytics-data/data-analyses/high_quality_transit_areas/hqta_points.parquet
    # Source: assemble_hqta_polygons
    hqta_areas:
        driver: geoparquet
        description: Combined polygon data for all HQTA types. 
        args:
          urlpath: gs://calitp-analytics-data/data-analyses/high_quality_transit_areas/hqta_areas.parquet